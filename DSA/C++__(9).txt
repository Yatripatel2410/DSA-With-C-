//1. prime number
/*
#include <iostream>
using namespace std;

bool isprime(int n){
    
    if(n<=1){
        return false;
    }
    
    for(int i=2; i<n; i++){
        if(n%i==0){
            return false;
        }
    }
    return true;
}

int countprime(int n){
    int count=0;
    for(int i=2; i<n; i++){
        if(isprime(i)){
            count++;
        }
    }
    return count;
}

int main()
{
    int n;
    cin>>n;
    
    if(isprime(n)){
        cout<<"It Is A Prime Number..."<<endl;
    }
    else{
        cout<<"It is not prime number..."<<endl;
    }

    cout<<"total prime numbers are: "<<countprime(n)<<endl;
    
    return 0;
}
*/



//2. prime number with sieve of eratostheres 
/*
#include <iostream>
#include <vector>
using namespace std;

int countprime(int n) {
    if (n <= 1) return 0;

    int count = 0;
    vector<bool> prime(n + 1, true);

    prime[0] = prime[1] = false;

    for (int i = 2; i <= n; i++) {
        if (prime[i]) {
            count++;
            for (int j = 2 * i; j <= n; j += i) {
                prime[j] = false;
            }
        }
    }
    return count;
}

int main() {
    int n = 100;
    
    cout << "Total prime numbers are: " << countprime(n) << endl;

    return 0;
}
*/


//3. Euclid's algorithm
/*
#include <iostream>
#include <vector>
using namespace std;

int gcd(int a, int b){
    if(a==0){
        return b;
    }
    if(b==0){
        return a;
    }
    
    while(a != b){
        if(a>b){
            a = a - b;   
        }
        else{
            b = b - a;    
        }
    }
    return a;
}

int main() {
    int a, b;
    cout<<"enter the value of a a and b; "<<endl;
    cin>>a>>b;
    int ans=gcd(a, b);
    cout<<"gcd is: "<<ans;
    return 0;
}
*/



//4. fast exponentiation 
/*
#include <iostream>
#include <vector>
using namespace std;

int modularExponentiation(int x, int n, int m){
    
    int res = 1;
    
    while(n>0){
        if(n&1){
            //odd
            res = (1LL*(res) *(x)%m)%m;    //1LL is type cast in long long
        }
        x=(1LL*(x)%m * (x)%m)%m;
        n=n>>1;
    }
    return res;
}

int main() {
    int x, n, m;
    cout << "Enter the base (x): ";
    cin >> x;
    cout << "Enter the exponent (n): ";
    cin >> n;
    cout << "Enter the modulus (m): ";
    cin >> m;
    
    cout << "The result of (" << x << "^" << n << ") % " << m << " is: " << modularExponentiation(x, n, m) << endl;
    return 0;
}
*/
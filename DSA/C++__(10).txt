//1. pointers 
// pointer is use to store address
/*
#include <iostream>
#include <vector>
using namespace std;

int main() {
    
    int i=5;
    int *p4=0;
    p4=&i;
    cout<<*p4<<endl;
    cout<<p4<<endl;
    
    int num = 5;
    cout<<num<<endl;
    
    // address operator - &
    cout<<"address of num is: "<<&num<<endl;
    int *p=&num;
    cout<<"content in given pointer is: "<<*p<<endl;   // *p is de-refrence operatore----> value at address pointed by p 
    cout<<"pointer of address is (p ki value,,,,p me jo data hai wo print hoga): "<<p<<endl;
    (*p)++;
    cout<<"pointer of address is: "<<*p<<endl;
    
    // koi bhi data type ho pointer to always address store karega thoh usski size always 8 hi raheti hai
    
    cout<<"size of integer is: "<<sizeof(num)<<endl;
    cout<<"size of pointer is: "<<sizeof(p)<<endl;
    cout<<"size of pointer is: "<<sizeof(*p)<<endl;   // bcz ye num ka data point karta hai and wo int hai to 4 size aayegi
    double b=99.0;
    double *p2= &b;
    cout<<"size of pointer is: "<<sizeof(p2)<<endl;
    
    int num1=5;
    int a= num1;  
    cout<<"a before: "<<num1<<endl;
    a++;
    cout<<"a after: "<<num1<<endl;  //bcz num1 and a same data ko point out kar rahe hai to humari memory ek hi baar hogi
    
    cout<<"before: "<<num1<<endl;
    int *p5=&num1;
    (*p5)++;
    cout<<"after: "<<num1<<endl;
    
    //copying a pointer
    int *q=p5;
    cout<<p5<<" "<<q<<endl;
    cout<<*p5<<" "<<*q<<endl;
    
    //imp concept
    int j=3;
    int *t= &j;
    *t = (*t) + 1;
    cout<< *t <<endl;
    cout<<t<<endl;
    t=t+1;    // int 4 bit leta hai to addreess 4 se increment hoga bhale hi hum use 1 se increment karte hai fir bhi
    cout<<t<<endl;
    
    // pointer to int is created , and pointing to same garbage address
    int *p3=0;
    cout<< *p3 <<"segmentation fault aayega"<<endl;
    
  
}
*/




//2. pointers 
/*
#include <iostream>
using namespace std;

int main()
{
    int arr[10]={23, 122, 41, 67};
    cout<<"Address of 1st memory block is: "<<arr<<endl;    
    cout<<"Address of 1st memory block is: "<<&arr[0]<<endl;
    
    cout<<"value of 1st location: "<< *arr <<endl;
    cout<<"value of 2nd location: "<< *(arr+1) <<endl;
    
    cout<<"value at 1st location + 1: "<< (*arr)+1<<endl;
    
    cout<<"2nd index element: "<<arr[2]<<endl;
    cout<<"2nd index element: "<<*(arr+2)<<endl;
    
    int i=3;
    cout<<i[arr]<<endl;
    cout<<arr[i]<<endl;
    cout<<*(arr+i)<<endl;
    cout<<*(i+arr)<<endl;
    
    int temp[10];
    cout<<"size of entire array temp is: "<< sizeof(temp)<<endl;
    cout<<"size of *temp: "<<sizeof(*temp)<<endl;
    cout<<"size of &temp: "<<sizeof(&temp)<<endl;
    
    int *ptr= &temp[0];
    cout<<"size of one element: "<<sizeof(ptr)<<endl;
    cout<<" size of *ptr: "<< sizeof(*ptr)<<endl;
    cout<<"size of &ptr: "<< sizeof(&ptr)<<endl;
    
    int a[10]={1, 2, 3, 5};
    cout<<&a<<endl;
    cout<<&a[0]<<endl;
    cout<<a<<endl;
    
    int *p=&a[0];
    cout<<"data available in p: "<<p<<endl;
    cout<<"store value of the address present in p: "<<*p<<endl;
    cout<<"address of p: "<<&p<<endl;
    
    int b[10];
    //b=b+1; //ERROR
    int *c=&b[0];
    c=c+1;
    cout<<c<<endl;
    
    return 0;
}
*/



//3. pointer in char array  
/*
#include <iostream>
using namespace std;

int main()
{
    //cout ki implementation integer data and character data ke liye alag hoti hai
     int arr[5]={1, 2, 3, 4, 5};
     char ch[6]="abcde";
     
     cout<<"printing address: "<<arr<<endl;
     cout<<"printing store data: "<<ch<<endl;
     
     char *c= &ch[0];
     //prints entire string
     cout<<c<<endl;
     
     char temp = 'z';
     char *p=&temp;
     
     cout<<p<<endl;  // jab tak null pointer nhi milta tab tak print karega that's why ?marks aata hai
}
*/



//4. pointer in functions  
/*
#include <iostream>
using namespace std;


void print(int *p){
    cout<<p<<endl;
}
void print1(int *p){
    cout<<*p<<endl;
}
void update(int *p){
    p=p+1;
    //cout<<"inside updated value: "<<p<<endl;
    *p=*p+1;
}
int main()
{
    int value=5;
    int *p=&value;
    
    print(p);
    print1(p);
    cout<<"before: "<<p<<endl;
    update(p);
    cout<<"after: "<<p<<endl;
    
    return 0;
}
*/



//5. dynamic memory allocation 
/*
#include <iostream>
using namespace std;

int main()
{
    // int* arr= new int [n];  //1D Array 
    
    int row;
    cin>>row;
    
    int col;
    cin>>col;
    
    int** arr= new int*[row];
    
    for(int i=0; i<row; i++){
        arr[i] = new int [col];
    }
    
    //creation done
    //taking inputs
    for(int i=0; i<row; i++){
        for(int j=0; j<col; j++){
            cin>>arr[i][j];
        }
    }

    //taking output
    for(int i=0; i<row; i++){
        for(int j=0; j<col; j++){
            cout<<arr[i][j]<<"  ";
        }cout<<endl;
    }
    
    //heap me memory hai to kaam ho jane ke baad memory free(relise)  bhi hume hi karva ni padegi
    
    //releasing memory
    for(int i=0; i<row; i++){
        delete [] arr[i];
    }
    
    delete []arr;
    
    return 0;
}    */
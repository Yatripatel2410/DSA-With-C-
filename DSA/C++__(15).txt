//1. power set (subset)
//set of all subset means power set 
/*
#include <iostream>
#include<vector>
using namespace std;

void solve(vector<int> nums, vector<int> output, int index, vector<vector<int>> &ans){
    //base case
    if(index>=nums.size()){
        ans.push_back(output);
        return ;
    }
    
    //exclude
    solve(nums, output, index+1, ans);
    
    //include
    int element=nums[index];
    output.push_back(element);
    solve(nums, output, index+1, ans);
    
}

vector<vector<int>> subsets(vector<int>& nums){
    vector<vector<int>> ans;
    vector<int> output;
    int index=0;
    solve(nums, output, index, ans);
    return ans;
}

int main()
{
    vector<int> nums = {1, 2, 3}; // example input
    vector<vector<int>> result = subsets(nums);
    
    // print the result
    for (auto subset : result) {
        for (auto num : subset) {
            cout << num << " ";
        }
        cout << endl;
    }
    
    return 0;
}   */




//2. Subsequences
/*
#include <iostream>
#include<vector>
using namespace std;

void solve(vector<string>& ans, string str, string output, int i) {
    //base case
    if(i>=str.length()) {
        ans.push_back(output);
        return ;
    }
    
    //exclude
    solve(ans, str, output, i+1);
    //include
    output.push_back(str[i]);
    solve(ans, str, output, i+1);
}

vector<string> subsequences(string str){
    vector<string> ans;
    string output = "";
    solve(ans,str,output,0);
    return ans;
}

int main()
{
    string str; // input string
    cout << "Enter a string: ";
    cin >> str;
    
    vector<string> result = subsequences(str);
    
    // print the result
    cout << "Subsequences: " << endl;
    for (auto subsequence : result) {
        cout << subsequence << endl;
    }
    
    return 0;
}
*/




//3. Letter combination of a phone number (Phone keypad problem)
/*
#include<iostream>
#include<vector>
using namespace std;

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> ans;
        if(digits.length()==0)
            return ans;
        string output;
        int index = 0;
        string mapping[10] = {"", "", "abc", "def", "ghi", "jkl","mno","pqrs","tuv","wxyz"};
        solve(digits, output, index, ans, mapping);
        return ans;
    }
    
    void solve(string digit, string output, int index, vector<string>& ans, string mapping[] ) {
        
        //base case
        if(index >= digit.length()) {
            ans.push_back(output);
            return;
        }
        
        int number = digit[index] - '0';
        string value = mapping[number];
        
        for(int i=0; i<value.length(); i++) {
            output.push_back(value[i]);
            solve(digit, output, index+1, ans, mapping);
            output.pop_back();
        }
        
    }
};


int main() {
    Solution solution;
    string digits;
    cout << "Enter a string of digits: ";
    cin >> digits;
    
    vector<string> result = solution.letterCombinations(digits);
    
    cout << "Letter combinations: ";
    for(string str : result) {
        cout << str << " ";
    }
    cout << endl;
    
    return 0;
}
*/



//4. Rat in a maze problem
/*
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

bool isSafe(int newx, int newy, int n, vector<vector<int>> &visited, vector<vector<int>> &m) {
    if ((newx >= 0 && newx < n) && (newy >= 0 && newy < n) && (visited[newx][newy] == 0) && (m[newx][newy] == 1)) {
        return true;
    }
    return false;
}

void solve(vector<vector<int>> &m, int n, vector<string> &ans, int x, int y, vector<vector<int>> &visited, string path) {
    if (x == n - 1 && y == n - 1) {
        ans.push_back(path);
        return;
    }
    
    visited[x][y] = 1;
    
    // Down
    int newx = x + 1;
    int newy = y;
    if (isSafe(newx, newy, n, visited, m)) {
        path.push_back('D');
        solve(m, n, ans, newx, newy, visited, path);
        path.pop_back();
    }
    
    // Left
    newx = x;
    newy = y - 1;
    if (isSafe(newx, newy, n, visited, m)) {
        path.push_back('L');
        solve(m, n, ans, newx, newy, visited, path);
        path.pop_back();
    }
    
    // Right
    newx = x;
    newy = y + 1;
    if (isSafe(newx, newy, n, visited, m)) {
        path.push_back('R');
        solve(m, n, ans, newx, newy, visited, path);
        path.pop_back();
    }
    
    // Up
    newx = x - 1;
    newy = y;
    if (isSafe(newx, newy, n, visited, m)) {
        path.push_back('U');
        solve(m, n, ans, newx, newy, visited, path);
        path.pop_back();
    }
    
    visited[x][y] = 0;
}

vector<string> findPath(vector<vector<int>> &m, int n) {
    vector<string> ans;
    
    if (m[0][0] == 0) {
        return ans;
    }
    
    int srcx = 0;
    int srcy = 0;
    
    vector<vector<int>> visited(n, vector<int>(n, 0));
    
    string path = "";
    solve(m, n, ans, srcx, srcy, visited, path);
    sort(ans.begin(), ans.end());
    return ans;
}

int main() {
    // Define the maze as a 2D vector
    vector<vector<int>> m = {
        {1, 0, 0, 0},
        {1, 1, 0, 1},
        {1, 1, 0, 0},
        {0, 1, 1, 1}
    };
    
    int n = m.size();
    
    // Find all paths from (0, 0) to (n-1, n-1)
    vector<string> paths = findPath(m, n);
    
    // Print the paths
    if (paths.empty()) {
        cout << "No path found" << endl;
    } else {
        cout << "Paths found:" << endl;
        for (const string &path : paths) {
            cout << path << endl;
        }
    }
    
    return 0;
}
*/
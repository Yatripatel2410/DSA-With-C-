
//1. find unique element in array
/*
#include <iostream>
#include <climits>
using namespace std;

int find(int *arr, int size){
    int ans=0;
    for(int i =0; i<size;i++){
        ans=ans^arr[i];
    }
    return ans;
}



int main(){
    
    int size;
    cin>>size;
    int a[100];
    for(int i=0; i<size;i++){
        cin>>a[i];
    }
    cout<<"Ans is:"<<find(a, size);
    
    return 0;
}
*/





//2. find duplicate element in array
/*
#include <iostream>
#include <climits>
#include<vector>
using namespace std;

int duplicate(vector<int> &arr ){
    int ans=0;
    for(int i =0; i<arr.size();i++){
        ans=ans^i;
    }
    for(int i=1;i<arr.size();i++){
        ans=ans^i;
        }
    return ans;
}
*/





//3. binary search
/*
#include <iostream>
using namespace std;

int binarySearch(int arr[], int size, int key){
    int start = 0;
    int end = (size-1);
    
    int mid = start + (end-start)/2;
    while(start <= end){
    if(arr[mid]==key){
        return mid;
    }
    else if(arr[mid]>key){
        end= mid-1;
    }
    else{
        start=mid+1;
    }
    mid = start + (end-start)/2;
    }
    return -1;
}

int main()
{
    int even[6]={2,4,6,8,12,18};
    int odd[5]={3,8,11,14,16};
    
    int index= binarySearch(even, 6, 12);
    cout<<"index of 12 is:"<<index<<endl;
    
    int index2= binarySearch(odd, 5, 11);
    cout<<"index of 11 is:"<<index2<<endl;
    
    return 0;
}
*/






//4. first and last occurence of the arrray
/*
#include <iostream>
using namespace std;

int firstOcc(int arr[], int n, int key){
    int s=0;
    int e=(n-1);
    int mid=s+(e-s)/2;
    int ans=-1;
    
    while(s<=e){
        if(arr[mid]==key){
            ans=mid;
            e=mid-1;
        }
        else if(arr[mid]<key){
            s=mid+1;
        }
        else{
            e=mid-1;
        }
        mid=s+(e-s)/2;
    }
    return ans;
}

int lastOcc(int arr[], int n, int key){
    int s=0;
    int e=(n-1);
    int mid=s+(e-s)/2;
    int ans=-1;
    
    while(s<=e){
        if(arr[mid]==key){
            ans=mid;
            s=mid+1;
        }
        else if(arr[mid]<key){
            s=mid+1;
        }
        else{
            e=mid-1;
        }
        mid=s+(e-s)/2;
    }
    return ans;
}

int main()
{
    int even[8]={1,2,3,3,3,3,3,5};
    cout<<"1st occurence of 3 is: "<<firstOcc(even, 8, 3)<<endl;
    cout<<"last occurence of 3 is: "<<lastOcc(even, 8, 3);
    return 0;
}
*/







//5. find Mountain array
/*
#include <iostream>
using namespace std;

int mountainElement(int arr[], int n){
    int s=0;
    int e=(n-1);
    int mid=s+(e-s)/2;
    
    while(s<e){
        if(arr[mid]<arr[mid+1]){
            s=mid+1;
        }
        else{
            e=mid;
        }
        mid=s+(e-s)/2;
    }
    return s;
}

int main()
{
    int a[4]={3,4,5,1};
    cout<<"Mountain element is: "<<mountainElement(a, 4)<<endl;

    return 0;
}
*/







//6. find pivot element in the array
/*
#include <iostream>
using namespace std;

int pivot(int arr[], int n){
    int s=0;
    int e=n-1;
    int mid =s+(e-s)/2;
    
    while(s<e){
        if(arr[mid]>=arr[0]){
            s=mid+1;
        }
        else{
            e=mid;
        }
        mid=s+(e-s)/2;
    }
    return s;
    
}

int main()
{
    int a[8]={8,10,17,51,0,1,2,3};
    cout<<"Pivot element is:"<<pivot(a,8)<<endl;
    
    return 0;
}
*/





//7. search in rotated and sorted array
/*
#include <iostream>
using namespace std;

int pivot(int arr[], int n){
    int s=0;
    int e=n-1;
    int mid =s+(e-s)/2;
    
    while(s<e){
        if(arr[mid]>=arr[0]){
            s=mid+1;
        }
        else{
            e=mid;
        }
        mid=s+(e-s)/2;
    }
    return s;
    
}

int binarySearch(int arr[], int s,int e, int key){
    int start = s;
    int end = e;
    
    int mid = start + (end-start)/2;
    while(start <= end){
    if(arr[mid]==key){
        return mid;
    }
    else if(arr[mid]>key){
        end= mid-1;
    }
    else{
        start=mid+1;
    }
    mid = start + (end-start)/2;
    }
    return -1;
}


int findPosition(int arr[], int n, int k){
    int Pivot=pivot(arr, n);    
    if(k>=arr[Pivot] && arr[n-1]){
        return binarySearch(arr,Pivot,n-1,k);
    }
    else{
        return binarySearch(arr, 0 , Pivot -1 , k);
    }
}

int main()
{
    int a[6]={7,9,17,1,2,3};
    
    cout<<"position is:"<<findPosition(a, 6, 2)<<endl;
    
    return 0;
}
*/






//7. square root using binary search

#include <iostream>
using namespace std;

int binarySearch(int n){
    int s=0;
    int e=n;
    long long int mid=s+(e-s)/2;
    long long int ans=-1;
    
    while(s<=e){
        
        long long int square=mid*mid;
        
        if(square==n){
            return mid;
        }
        if(square<n){
            ans=mid;
            s=mid+1;
        }
        else{
            e=mid-1;
        }
        mid=s+(e-s)/2;
    }
    return ans;
}

int squareRoot(int s){
    return binarySearch(s);
}

double moreprecision(int n, int precision, int tempsol){
    
    double factor=1;
    double ans=tempsol;
    
    for(int i=0; i<precision;i++){
        
        factor=factor/10;
        
        for(double j=ans; j*j<n; j=j+factor){
            ans=j;
        }
    }
    return ans;
}

int main()
{
    int n;
    cout<<"Enter the number: ";
    cin>>n;
    
    int tempsol=squareRoot(n);
    
    
    cout<<"SquareRoot is:"<<moreprecision(n, 3, tempsol)<<endl;
    
    return 0;
}



